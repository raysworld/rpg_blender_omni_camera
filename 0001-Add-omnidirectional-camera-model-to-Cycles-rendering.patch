diff --git a/intern/cycles/blender/addon/properties.py b/intern/cycles/blender/addon/properties.py
index f5cd88f6b6a..a93dd977d67 100644
--- a/intern/cycles/blender/addon/properties.py
+++ b/intern/cycles/blender/addon/properties.py
@@ -68,6 +68,7 @@ enum_panorama_types = (
                           "Similar to most fisheye modern lens, takes sensor dimensions into consideration", 2),
     ('FISHEYE_LENS_POLYNOMIAL', "Fisheye Lens Polynomial",
      "Defines the lens projection as polynomial to allow real world camera lenses to be mimicked", 4),
+    ('OMNI', "Omnidirectional", "Uses Scaramuzza omnidirectional camera model", 6)
 )
 
 enum_curve_shape = (
@@ -1027,6 +1028,62 @@ class CyclesCameraSettings(bpy.types.PropertyGroup):
         description="Coefficient K4 of the lens polynomial",
         default=camera.default_fisheye_polynomial[4], precision=6, step=0.1, subtype='ANGLE',
     )
+    a0: FloatProperty(
+        name="a0",
+        description="a0",
+        default=-2.108794e+02,
+        )
+    a1: FloatProperty(
+        name="a1",
+        description="a1",
+        default=0.0,
+        )
+    a2: FloatProperty(
+        name="a2",
+        description="a2",
+        default=1.971697e-03,
+        )
+    a3: FloatProperty(
+        name="a3",
+        description="a3",
+        default=-2.633567e-06,
+        )
+    a4: FloatProperty(
+        name="a4",
+        description="a4",
+        default=1.266556e-08,
+        )
+    shift_cx: FloatProperty(
+        name="shift_cx",
+        description="shift_cx",
+        default=-21.763489,
+        )
+    shift_cy: FloatProperty(
+        name="shift_cy",
+        description="shift_cy",
+        default=9.460006,
+        )
+    c: FloatProperty(
+        name="c",
+        description="c",
+        default=0.999609,
+        )
+    d: FloatProperty(
+        name="d",
+        description="d",
+        default=-0.000222,
+        )
+    e: FloatProperty(
+        name="e",
+        description="e",
+        default=-0.000116,
+        )
+    radius: FloatProperty(
+        name="radius",
+        description="radius",
+        default=0.0,
+        )
+
 
     @classmethod
     def register(cls):
diff --git a/intern/cycles/blender/camera.cpp b/intern/cycles/blender/camera.cpp
index d7def9fdb7c..24a2dd04cf9 100644
--- a/intern/cycles/blender/camera.cpp
+++ b/intern/cycles/blender/camera.cpp
@@ -63,6 +63,18 @@ struct BlenderCamera {
   float fisheye_polynomial_k3;
   float fisheye_polynomial_k4;
 
+  float a0;
+  float a1;
+  float a2;
+  float a3;
+  float a4;
+  float c;
+  float d;
+  float e;
+  float shift_cx;
+  float shift_cy;
+  float radius;
+
   enum { AUTO, HORIZONTAL, VERTICAL } sensor_fit;
   float sensor_width;
   float sensor_height;
@@ -209,6 +221,18 @@ static void blender_camera_from_object(BlenderCamera *bcam,
     bcam->fisheye_polynomial_k3 = RNA_float_get(&ccamera, "fisheye_polynomial_k3");
     bcam->fisheye_polynomial_k4 = RNA_float_get(&ccamera, "fisheye_polynomial_k4");
 
+    bcam->a0 = RNA_float_get(&ccamera, "a0");
+    bcam->a1 = RNA_float_get(&ccamera, "a1");
+    bcam->a2 = RNA_float_get(&ccamera, "a2");
+    bcam->a3 = RNA_float_get(&ccamera, "a3");
+    bcam->a4 = RNA_float_get(&ccamera, "a4");
+    bcam->c = RNA_float_get(&ccamera, "c");
+    bcam->d = RNA_float_get(&ccamera, "d");
+    bcam->e = RNA_float_get(&ccamera, "e");
+    bcam->shift_cx = RNA_float_get(&ccamera, "shift_cx");
+    bcam->shift_cy = RNA_float_get(&ccamera, "shift_cy");
+    bcam->radius = RNA_float_get(&ccamera, "radius");
+
     bcam->interocular_distance = b_camera.stereo().interocular_distance();
     if (b_camera.stereo().convergence_mode() == BL::CameraStereoData::convergence_mode_PARALLEL) {
       bcam->convergence_distance = FLT_MAX;
@@ -481,6 +505,18 @@ static void blender_camera_sync(Camera *cam,
   cam->set_fisheye_polynomial_k3(bcam->fisheye_polynomial_k3);
   cam->set_fisheye_polynomial_k4(bcam->fisheye_polynomial_k4);
 
+  cam->set_a0(bcam->a0);
+  cam->set_a1(bcam->a1);
+  cam->set_a2(bcam->a2);
+  cam->set_a3(bcam->a3);
+  cam->set_a4(bcam->a4);
+  cam->set_c(bcam->c);
+  cam->set_d(bcam->d);
+  cam->set_e(bcam->e);
+  cam->set_shift_cx(bcam->shift_cx);
+  cam->set_shift_cy(bcam->shift_cy);
+  cam->set_radius(bcam->radius);
+
   cam->set_longitude_min(bcam->longitude_min);
   cam->set_longitude_max(bcam->longitude_max);
 
diff --git a/intern/cycles/kernel/camera/projection.h b/intern/cycles/kernel/camera/projection.h
index 1d16aa35abe..7a562a4ce89 100644
--- a/intern/cycles/kernel/camera/projection.h
+++ b/intern/cycles/kernel/camera/projection.h
@@ -144,6 +144,44 @@ ccl_device_inline float3 fisheye_lens_polynomial_to_direction(
   return make_float3(cosf(theta), -cosf(phi) * sinf(theta), sinf(phi) * sinf(theta));
 }
 
+ccl_device float3 omni_to_direction(
+  float u, float v, float imageWidth, float imageHeight, float radiusPixels,
+  float a0, float a1, float a2, float a3, float a4,
+  float kC, float kD, float kE, float cx, float cy, float invDetAffine)
+{
+  // scale coordinates and shift center
+  u = u * imageWidth - cx;
+  v = imageHeight * (1.f - v) - cy;
+
+  if (radiusPixels > 0.f && u * u + v * v > radiusPixels * radiusPixels)
+    return make_float3(0.f, 0.f, 0.f);
+
+  // inverse affine transformation
+  const float affine_u = invDetAffine * (kC * u - kE * v);
+  const float affine_v = invDetAffine * (-kD * u + v);
+
+  // ray z-direction
+  const float rho2 = affine_u * affine_u + affine_v * affine_v;
+  const float rho = sqrtf(rho2);
+  const float z = a0 + a1 * rho + a2 * rho2 + a3 * rho2 * rho + a4 * rho2 * rho2;
+  const float invnorm = 1.f / sqrtf(affine_u * affine_u + affine_v * affine_v + z * z);
+
+  return make_float3(-invnorm * z, -invnorm * affine_u, -invnorm * affine_v);
+}
+
+ccl_device float2 direction_to_omni(float3 dir,
+	float imageWidth,
+	float imageHeight,
+	float kC,
+	float kD,
+	float kE,
+	float cx,
+	float cy)
+{
+	// Not implemented yet.
+	return make_float2(0.0f, 0.0f);
+}
+
 ccl_device float2 direction_to_fisheye_lens_polynomial(
     float3 dir, float coeff0, float4 coeffs, float width, float height)
 {
@@ -242,6 +280,23 @@ ccl_device_inline float3 panorama_to_direction(ccl_constant KernelCamera *cam, f
                                                   cam->fisheye_fov,
                                                   cam->sensorwidth,
                                                   cam->sensorheight);
+    case PANORAMA_OMNI:
+	    return omni_to_direction(u,
+                               v,
+                               cam->width,
+                               cam->height,
+                               cam->radius * cam->height / 2.f,
+                               cam->a0,
+                               cam->a1,
+                               cam->a2,
+                               cam->a3,
+                               cam->a4,
+                               cam->c,
+                               cam->d,
+                               cam->e,
+                               cam->width / 2.f + cam->shift_cx,
+                               cam->height / 2.f + cam->shift_cy,
+                               1.f / (cam->c - cam->d*cam->e));
     case PANORAMA_FISHEYE_EQUISOLID:
     default:
       return fisheye_equisolid_to_direction(
@@ -266,6 +321,16 @@ ccl_device_inline float2 direction_to_panorama(ccl_constant KernelCamera *cam, f
                                                   cam->fisheye_lens_polynomial_coefficients,
                                                   cam->sensorwidth,
                                                   cam->sensorheight);
+    case PANORAMA_OMNI:
+      return direction_to_omni(dir,
+                              cam->width,
+                              cam->height,
+                              cam->c,
+                              cam->d,
+                              cam->e,
+                              cam->width / 2.f + cam->shift_cx,
+                              cam->height / 2.f + cam->shift_cy);
+        
     case PANORAMA_FISHEYE_EQUISOLID:
     default:
       return direction_to_fisheye_equisolid(
diff --git a/intern/cycles/kernel/types.h b/intern/cycles/kernel/types.h
index 24c5a6a4540..9646f3c9bbb 100644
--- a/intern/cycles/kernel/types.h
+++ b/intern/cycles/kernel/types.h
@@ -491,6 +491,7 @@ enum PanoramaType {
   PANORAMA_MIRRORBALL = 3,
   PANORAMA_FISHEYE_LENS_POLYNOMIAL = 4,
   PANORAMA_EQUIANGULAR_CUBEMAP_FACE = 5,
+  PANORAMA_OMNI = 6, 
 
   PANORAMA_NUM_TYPES,
 };
@@ -1008,6 +1009,18 @@ typedef struct KernelCamera {
   float fisheye_lens_polynomial_bias;
   float4 fisheye_lens_polynomial_coefficients;
 
+  float a0;
+  float a1;
+  float a2;
+  float a3;
+  float a4;
+  float c;
+  float d;
+  float e;
+  float shift_cx;
+  float shift_cy;
+  float radius;
+
   /* stereo */
   float interocular_offset;
   float convergence_distance;
diff --git a/intern/cycles/scene/camera.h b/intern/cycles/scene/camera.h
index c150405acc2..0fd877569de 100644
--- a/intern/cycles/scene/camera.h
+++ b/intern/cycles/scene/camera.h
@@ -86,6 +86,18 @@ class Camera : public Node {
   NODE_SOCKET_API(float, fisheye_polynomial_k3)
   NODE_SOCKET_API(float, fisheye_polynomial_k4)
 
+  NODE_SOCKET_API(float, a0)
+  NODE_SOCKET_API(float, a1)
+  NODE_SOCKET_API(float, a2)
+  NODE_SOCKET_API(float, a3)
+  NODE_SOCKET_API(float, a4)
+  NODE_SOCKET_API(float, c)
+  NODE_SOCKET_API(float, d)
+  NODE_SOCKET_API(float, e)
+  NODE_SOCKET_API(float, shift_cx)
+  NODE_SOCKET_API(float, shift_cy)
+  NODE_SOCKET_API(float, radius)
+
   /* panorama stereo */
   NODE_SOCKET_API(StereoEye, stereo_eye)
   NODE_SOCKET_API(bool, use_spherical_stereo)
diff --git a/release/scripts/startup/bl_ui/properties_data_camera.py b/release/scripts/startup/bl_ui/properties_data_camera.py
index 963ffc60806..7c295b8e97d 100644
--- a/release/scripts/startup/bl_ui/properties_data_camera.py
+++ b/release/scripts/startup/bl_ui/properties_data_camera.py
@@ -99,7 +99,31 @@ class DATA_PT_lens(CameraButtonsPanel, Panel):
                     col.prop(ccam, "fisheye_polynomial_k2", text="K2")
                     col.prop(ccam, "fisheye_polynomial_k3", text="K3")
                     col.prop(ccam, "fisheye_polynomial_k4", text="K4")
+                elif ccam.panorama_type == "OMNI":
+                    sub = col.column(align=True)
+                    sub.label(text="Polynomial:")
+                    sub.prop(ccam, "a0")
+                    sub.prop(ccam, "a1")
+                    sub.prop(ccam, "a2")
+                    sub.prop(ccam, "a3")
+                    sub.prop(ccam, "a4")
+                    sub = col.column(align=True)
+                    sub.label(text="Shift (pixels):")
+                    sub.prop(ccam, "shift_cx", text="X")
+                    sub.prop(ccam, "shift_cy", text="Y")
+                    sub = col.column(align=True)
+                    sub.label(text="Affine parameters:")
+                    sub.prop(ccam, "c")
+                    sub.prop(ccam, "d")
+                    sub.prop(ccam, "e")
+                    sub = col.column(align=True)
+                    sub.label(text="Radius (scale factor of half-height):")
+                    sub.prop(ccam, "radius", text="Radius")
 
+                if not ccam.panorama_type == 'OMNI':
+                    sub = col.column(align=True)
+                    sub.prop(cam, "shift_x", text="Shift X")
+                    sub.prop(cam, "shift_y", text="Y")
             elif engine in {'BLENDER_RENDER', 'BLENDER_EEVEE', 'BLENDER_EEVEE_NEXT', 'BLENDER_WORKBENCH'}:
                 if cam.lens_unit == 'MILLIMETERS':
                     col.prop(cam, "lens")
@@ -110,9 +134,9 @@ class DATA_PT_lens(CameraButtonsPanel, Panel):
         col = layout.column()
         col.separator()
 
-        sub = col.column(align=True)
-        sub.prop(cam, "shift_x", text="Shift X")
-        sub.prop(cam, "shift_y", text="Y")
+        # sub = col.column(align=True)
+        # sub.prop(cam, "shift_x", text="Shift X")
+        # sub.prop(cam, "shift_y", text="Y")
 
         col.separator()
         sub = col.column(align=True)
